Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement NEWLINE statements
Rule 2     statements -> empty NEWLINE statements
Rule 3     statements -> empty
Rule 4     empty -> <empty>
Rule 5     statement -> var_decl
Rule 6     statement -> sequence
Rule 7     statement -> pattern
Rule 8     sequence -> sequence_header NEWLINE sequence_body
Rule 9     sequence_header -> SEQUENCE COLON IDENT
Rule 10    sequence_body -> IDENT NEWLINE sequence_body
Rule 11    sequence_body -> empty
Rule 12    pattern -> pattern_header NEWLINE pattern_body
Rule 13    pattern_header -> PATTERN COLON value
Rule 14    pattern_body -> PATTERN_LINE NEWLINE pattern_body
Rule 15    pattern_body -> empty
Rule 16    value -> INTEGER
Rule 17    value -> IDENT
Rule 18    var_decl -> BPM COLON INTEGER
Rule 19    var_decl -> LOOP COLON INTEGER
Rule 20    var_decl -> RESOLUTION COLON INTEGER

Terminals, with rules where they appear

BPM                  : 18
COLON                : 9 13 18 19 20
IDENT                : 9 10 17
INTEGER              : 16 18 19 20
LOOP                 : 19
NEWLINE              : 1 2 8 10 12 14
PATTERN              : 13
PATTERN_LINE         : 14
RESOLUTION           : 20
SEQUENCE             : 9
error                : 

Nonterminals, with rules where they appear

empty                : 2 3 11 15
pattern              : 7
pattern_body         : 12 14
pattern_header       : 12
sequence             : 6
sequence_body        : 8 10
sequence_header      : 8
statement            : 1
statements           : 1 2 0
value                : 13
var_decl             : 5

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement NEWLINE statements
    (2) statements -> . empty NEWLINE statements
    (3) statements -> . empty
    (5) statement -> . var_decl
    (6) statement -> . sequence
    (7) statement -> . pattern
    (4) empty -> .
    (18) var_decl -> . BPM COLON INTEGER
    (19) var_decl -> . LOOP COLON INTEGER
    (20) var_decl -> . RESOLUTION COLON INTEGER
    (8) sequence -> . sequence_header NEWLINE sequence_body
    (12) pattern -> . pattern_header NEWLINE pattern_body
    (9) sequence_header -> . SEQUENCE COLON IDENT
    (13) pattern_header -> . PATTERN COLON value

    NEWLINE         reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    BPM             shift and go to state 5
    LOOP            shift and go to state 8
    RESOLUTION      shift and go to state 12
    SEQUENCE        shift and go to state 11
    PATTERN         shift and go to state 10

    sequence_header                shift and go to state 1
    statements                     shift and go to state 2
    sequence                       shift and go to state 3
    pattern                        shift and go to state 4
    pattern_header                 shift and go to state 7
    var_decl                       shift and go to state 6
    statement                      shift and go to state 9
    empty                          shift and go to state 13

state 1

    (8) sequence -> sequence_header . NEWLINE sequence_body

    NEWLINE         shift and go to state 14


state 2

    (0) S' -> statements .



state 3

    (6) statement -> sequence .

    NEWLINE         reduce using rule 6 (statement -> sequence .)


state 4

    (7) statement -> pattern .

    NEWLINE         reduce using rule 7 (statement -> pattern .)


state 5

    (18) var_decl -> BPM . COLON INTEGER

    COLON           shift and go to state 15


state 6

    (5) statement -> var_decl .

    NEWLINE         reduce using rule 5 (statement -> var_decl .)


state 7

    (12) pattern -> pattern_header . NEWLINE pattern_body

    NEWLINE         shift and go to state 16


state 8

    (19) var_decl -> LOOP . COLON INTEGER

    COLON           shift and go to state 17


state 9

    (1) statements -> statement . NEWLINE statements

    NEWLINE         shift and go to state 18


state 10

    (13) pattern_header -> PATTERN . COLON value

    COLON           shift and go to state 19


state 11

    (9) sequence_header -> SEQUENCE . COLON IDENT

    COLON           shift and go to state 20


state 12

    (20) var_decl -> RESOLUTION . COLON INTEGER

    COLON           shift and go to state 21


state 13

    (2) statements -> empty . NEWLINE statements
    (3) statements -> empty .

    NEWLINE         shift and go to state 22
    $end            reduce using rule 3 (statements -> empty .)


state 14

    (8) sequence -> sequence_header NEWLINE . sequence_body
    (10) sequence_body -> . IDENT NEWLINE sequence_body
    (11) sequence_body -> . empty
    (4) empty -> .

    IDENT           shift and go to state 25
    NEWLINE         reduce using rule 4 (empty -> .)

    sequence_body                  shift and go to state 23
    empty                          shift and go to state 24

state 15

    (18) var_decl -> BPM COLON . INTEGER

    INTEGER         shift and go to state 26


state 16

    (12) pattern -> pattern_header NEWLINE . pattern_body
    (14) pattern_body -> . PATTERN_LINE NEWLINE pattern_body
    (15) pattern_body -> . empty
    (4) empty -> .

    PATTERN_LINE    shift and go to state 29
    NEWLINE         reduce using rule 4 (empty -> .)

    pattern_body                   shift and go to state 27
    empty                          shift and go to state 28

state 17

    (19) var_decl -> LOOP COLON . INTEGER

    INTEGER         shift and go to state 30


state 18

    (1) statements -> statement NEWLINE . statements
    (1) statements -> . statement NEWLINE statements
    (2) statements -> . empty NEWLINE statements
    (3) statements -> . empty
    (5) statement -> . var_decl
    (6) statement -> . sequence
    (7) statement -> . pattern
    (4) empty -> .
    (18) var_decl -> . BPM COLON INTEGER
    (19) var_decl -> . LOOP COLON INTEGER
    (20) var_decl -> . RESOLUTION COLON INTEGER
    (8) sequence -> . sequence_header NEWLINE sequence_body
    (12) pattern -> . pattern_header NEWLINE pattern_body
    (9) sequence_header -> . SEQUENCE COLON IDENT
    (13) pattern_header -> . PATTERN COLON value

    NEWLINE         reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    BPM             shift and go to state 5
    LOOP            shift and go to state 8
    RESOLUTION      shift and go to state 12
    SEQUENCE        shift and go to state 11
    PATTERN         shift and go to state 10

    sequence_header                shift and go to state 1
    statements                     shift and go to state 31
    sequence                       shift and go to state 3
    pattern                        shift and go to state 4
    pattern_header                 shift and go to state 7
    var_decl                       shift and go to state 6
    statement                      shift and go to state 9
    empty                          shift and go to state 13

state 19

    (13) pattern_header -> PATTERN COLON . value
    (16) value -> . INTEGER
    (17) value -> . IDENT

    INTEGER         shift and go to state 34
    IDENT           shift and go to state 32

    value                          shift and go to state 33

state 20

    (9) sequence_header -> SEQUENCE COLON . IDENT

    IDENT           shift and go to state 35


state 21

    (20) var_decl -> RESOLUTION COLON . INTEGER

    INTEGER         shift and go to state 36


state 22

    (2) statements -> empty NEWLINE . statements
    (1) statements -> . statement NEWLINE statements
    (2) statements -> . empty NEWLINE statements
    (3) statements -> . empty
    (5) statement -> . var_decl
    (6) statement -> . sequence
    (7) statement -> . pattern
    (4) empty -> .
    (18) var_decl -> . BPM COLON INTEGER
    (19) var_decl -> . LOOP COLON INTEGER
    (20) var_decl -> . RESOLUTION COLON INTEGER
    (8) sequence -> . sequence_header NEWLINE sequence_body
    (12) pattern -> . pattern_header NEWLINE pattern_body
    (9) sequence_header -> . SEQUENCE COLON IDENT
    (13) pattern_header -> . PATTERN COLON value

    NEWLINE         reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    BPM             shift and go to state 5
    LOOP            shift and go to state 8
    RESOLUTION      shift and go to state 12
    SEQUENCE        shift and go to state 11
    PATTERN         shift and go to state 10

    sequence_header                shift and go to state 1
    statements                     shift and go to state 37
    sequence                       shift and go to state 3
    pattern                        shift and go to state 4
    pattern_header                 shift and go to state 7
    var_decl                       shift and go to state 6
    statement                      shift and go to state 9
    empty                          shift and go to state 13

state 23

    (8) sequence -> sequence_header NEWLINE sequence_body .

    NEWLINE         reduce using rule 8 (sequence -> sequence_header NEWLINE sequence_body .)


state 24

    (11) sequence_body -> empty .

    NEWLINE         reduce using rule 11 (sequence_body -> empty .)


state 25

    (10) sequence_body -> IDENT . NEWLINE sequence_body

    NEWLINE         shift and go to state 38


state 26

    (18) var_decl -> BPM COLON INTEGER .

    NEWLINE         reduce using rule 18 (var_decl -> BPM COLON INTEGER .)


state 27

    (12) pattern -> pattern_header NEWLINE pattern_body .

    NEWLINE         reduce using rule 12 (pattern -> pattern_header NEWLINE pattern_body .)


state 28

    (15) pattern_body -> empty .

    NEWLINE         reduce using rule 15 (pattern_body -> empty .)


state 29

    (14) pattern_body -> PATTERN_LINE . NEWLINE pattern_body

    NEWLINE         shift and go to state 39


state 30

    (19) var_decl -> LOOP COLON INTEGER .

    NEWLINE         reduce using rule 19 (var_decl -> LOOP COLON INTEGER .)


state 31

    (1) statements -> statement NEWLINE statements .

    $end            reduce using rule 1 (statements -> statement NEWLINE statements .)


state 32

    (17) value -> IDENT .

    NEWLINE         reduce using rule 17 (value -> IDENT .)


state 33

    (13) pattern_header -> PATTERN COLON value .

    NEWLINE         reduce using rule 13 (pattern_header -> PATTERN COLON value .)


state 34

    (16) value -> INTEGER .

    NEWLINE         reduce using rule 16 (value -> INTEGER .)


state 35

    (9) sequence_header -> SEQUENCE COLON IDENT .

    NEWLINE         reduce using rule 9 (sequence_header -> SEQUENCE COLON IDENT .)


state 36

    (20) var_decl -> RESOLUTION COLON INTEGER .

    NEWLINE         reduce using rule 20 (var_decl -> RESOLUTION COLON INTEGER .)


state 37

    (2) statements -> empty NEWLINE statements .

    $end            reduce using rule 2 (statements -> empty NEWLINE statements .)


state 38

    (10) sequence_body -> IDENT NEWLINE . sequence_body
    (10) sequence_body -> . IDENT NEWLINE sequence_body
    (11) sequence_body -> . empty
    (4) empty -> .

    IDENT           shift and go to state 25
    NEWLINE         reduce using rule 4 (empty -> .)

    sequence_body                  shift and go to state 40
    empty                          shift and go to state 24

state 39

    (14) pattern_body -> PATTERN_LINE NEWLINE . pattern_body
    (14) pattern_body -> . PATTERN_LINE NEWLINE pattern_body
    (15) pattern_body -> . empty
    (4) empty -> .

    PATTERN_LINE    shift and go to state 29
    NEWLINE         reduce using rule 4 (empty -> .)

    pattern_body                   shift and go to state 41
    empty                          shift and go to state 28

state 40

    (10) sequence_body -> IDENT NEWLINE sequence_body .

    NEWLINE         reduce using rule 10 (sequence_body -> IDENT NEWLINE sequence_body .)


state 41

    (14) pattern_body -> PATTERN_LINE NEWLINE pattern_body .

    NEWLINE         reduce using rule 14 (pattern_body -> PATTERN_LINE NEWLINE pattern_body .)

