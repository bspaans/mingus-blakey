Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    BPM
    DASH
    LOOP

Grammar

Rule 0     S' -> statement
Rule 1     statement -> sequence
Rule 2     statement -> pattern
Rule 3     sequence -> SEQUENCE COLON IDENT NEWLINE
Rule 4     pattern -> PATTERN COLON value
Rule 5     value -> INTEGER
Rule 6     value -> IDENT

Terminals, with rules where they appear

BPM                  : 
COLON                : 3 4
DASH                 : 
IDENT                : 3 6
INTEGER              : 5
LOOP                 : 
NEWLINE              : 3
PATTERN              : 4
SEQUENCE             : 3
error                : 

Nonterminals, with rules where they appear

pattern              : 2
sequence             : 1
statement            : 0
value                : 4

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . sequence
    (2) statement -> . pattern
    (3) sequence -> . SEQUENCE COLON IDENT NEWLINE
    (4) pattern -> . PATTERN COLON value

    SEQUENCE        shift and go to state 1
    PATTERN         shift and go to state 5

    pattern                        shift and go to state 2
    statement                      shift and go to state 4
    sequence                       shift and go to state 3

state 1

    (3) sequence -> SEQUENCE . COLON IDENT NEWLINE

    COLON           shift and go to state 6


state 2

    (2) statement -> pattern .

    $end            reduce using rule 2 (statement -> pattern .)


state 3

    (1) statement -> sequence .

    $end            reduce using rule 1 (statement -> sequence .)


state 4

    (0) S' -> statement .



state 5

    (4) pattern -> PATTERN . COLON value

    COLON           shift and go to state 7


state 6

    (3) sequence -> SEQUENCE COLON . IDENT NEWLINE

    IDENT           shift and go to state 8


state 7

    (4) pattern -> PATTERN COLON . value
    (5) value -> . INTEGER
    (6) value -> . IDENT

    INTEGER         shift and go to state 11
    IDENT           shift and go to state 9

    value                          shift and go to state 10

state 8

    (3) sequence -> SEQUENCE COLON IDENT . NEWLINE

    NEWLINE         shift and go to state 12


state 9

    (6) value -> IDENT .

    $end            reduce using rule 6 (value -> IDENT .)


state 10

    (4) pattern -> PATTERN COLON value .

    $end            reduce using rule 4 (pattern -> PATTERN COLON value .)


state 11

    (5) value -> INTEGER .

    $end            reduce using rule 5 (value -> INTEGER .)


state 12

    (3) sequence -> SEQUENCE COLON IDENT NEWLINE .

    $end            reduce using rule 3 (sequence -> SEQUENCE COLON IDENT NEWLINE .)

